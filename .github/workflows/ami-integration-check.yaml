name: Integration Test
on:
  push:
    branches:
      - main
jobs:
  ami-integration-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Run Node.js project
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Configure AWS CLI Profile
        run: |
          aws configure --profile github set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure --profile github set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure --profile github set region us-east-1  # Replace with your desired AWS region
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_PROFILE: github

      - name: Wait for MySQL to be ready
        run: |
          until nc -z -v -w30 localhost 3306
          do
            echo "Waiting for MySQL to be ready..."
            sleep 5
          done
      - name: Install project dependencies
        run: npm install
      - name: Set up .env
        run: echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
      - name: Run Integration tests 
        run: npm test
      - name: Build the Project Artifacts
        run: npm run build
      - name: Install Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.8.3/packer_1.8.3_linux_amd64.zip
          unzip packer_1.8.3_linux_amd64.zip
          sudo mv packer /usr/local/bin/
      
      - name : Packer Integration
        run: packer init .
      - name: Create AMI 
        run: packer build .
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEMO_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
          aws-profile: demo
      - name: Get the latest Debian AMI ID and Name
        id: get-ami-id-and-name
        run: |
          latest_ami=$(aws ec2 describe-images \
            --filters "Name=name,Values=csye6225_*" \
            --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text) 
          echo $latest_ami
